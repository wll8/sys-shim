import web.socket.server;
import web.socket.jsonServer;
import web.json;
import fsys;
import fsys.res;
import win.util.tray;
import win.ui;
import wsock.tcp.simpleHttpServer;
import web.view;
import inet.http;
import console;
import io;
import mouse
import process;
import process.popen
import inet.httpFile;
import web.form;
import web.multipartFormData;

// 放置全局变量
G = {}
G.killAll = function(){
	process.popen("taskkill /F /T /PID " + tostring(process.getId()))
}


var old = win.form._metaProperty.setIcon
win.form._metaProperty.setIcon = function(small, big) {
    big = big: small
    small, big = getIcon(small), getIcon(big)
    call(old, owner, big, small)
}

var tempPath = fsys.longpath(fsys.getTempDir() + "/sys-shim/")
fsys.createDir(tempPath)

// 释放资源
fsys.res.saveRes("/res", tempPath)

var cfgPath = ""
var baseData = {
    main = io.fullpath("./sys.js");
    page = io.fullpath("./page.html");
    pageShow = false;
    socket = {
        ip = "0.0.0.0";
        port = null;
    };
    form = {
		text = "main";
    };
    preloadScript = ``;
    userDataDir = null;
    browserArguments = ``;
}

if (_STUDIO_INVOKED) {
    cfgPath = io.fullpath("./dev.package.json")
}
else {
    cfgPath = io.fullpath("./package.json")
}
var data = table.assignDeep(
    table.clone(baseData), io.exist(cfgPath) ? web.json.parse(string.load(cfgPath)) : {}
)

// 创建 WebSocket 服务端
var wsrv = web.socket.server();
wsrv.start(data.socket.ip, data.socket.port);
var wsUrl = wsrv.getUrl()
var rpcServer = web.socket.jsonServer(wsrv);

// 这里可以自定义WebSocket 服务端可以使用的 URL 路径
wsrv.onUpgradeToWebsocket = function(hSocket) {
    return rpcServer.start(hSocket);
}

var onlyMsg = win.form({})
G.onlyMsg = onlyMsg

var msgMap = {
    _WM_RBUTTONUP = 0x205;
    _WM_LBUTTONUP = 0x202;
}

function deepGet(obj, str) {
    var arr = string.split(str, ".")
    var cur = obj
    var endKey = ``
    for (i = 1; #arr; 1) {
        var key = arr[i]
        if (#arr == i) {
            endKey = key
        }
        else {
            cur = cur[key] || cur[tonumber(key)]
        }
    }
    return cur, endKey
}

function getIcon(icon) {
    var icon = inet.url.is(icon) ? inet.http().get(icon) : icon
    var hIcon
    if (type(icon) == type.number) {
        if (icon >= 0x7F00 /*_IDI_APPLICATION*/ ) {
            hIcon = ::LoadIcon(null, topointer(icon));
        }
        else {
            hIcon = ::LoadIcon(_HINSTANSE, topointer(icon));
        }
    }
    elseif(type(icon) == type.string) {
        hIcon = win.image.createIcon(icon, true, 16, 32);
    }
    else {
        hIcon = icon: _HAPPICON;
    }
    return hIcon
}

// 封装为可以直接 path 路径访问 aardio 的对象属性和方法的形式
function wrapObj(obj) {
    return {
        callFn = function(path, ... ) {
            var cur, endKey = deepGet(obj, path)
            var fn = cur[endKey] || cur[tonumber(endKey)]
            return {
                call(fn, cur, ... )
            }
        }
        setVal = function(path, val) {
            var cur, endKey = deepGet(obj, path)
            cur[endKey] = val
            return cur[endKey]
        }
        getVal = function(path) {
            if (path == null) {
                return obj;
            }
            var cur, endKey = deepGet(obj, path)
            var val = cur[endKey] || cur[tonumber(endKey)]
            return val
        }
    };
}

function initBaseData() {
	// 父窗口转换
	if(type(data.form.parent) = "table") {
		data.form.parent = win.form(data.form.parent).hwnd
	}
	
	// js 暂不支持本地
	data.main = io.fullpath(data.main)
	// html 本地处理逻辑
	if(inet.url.is(data.page) == false) {
		var localpath, hash = ..string.match(data.page, "([^\#\?]+)(.*)");
		// 如果是相对路径，则相对于当前程序运行目录
		localpath = fsys.path.full(localpath, io.fullpath("~"))
		data.page = io.fullpath(localpath) + hash
		// 如果 js 和 html 都没有，则创建 html
		if (!io.exist(data.main) && !io.exist(localpath)) {
    		fsys.copy(tempPath + "/res/page.html", "./page.html")
    		data.page = io.fullpath(baseData.page)
    		localpath = data.page
		}
		// 当存在本地 html 时转换它为 http url
		if (io.exist(localpath)) {
			var root = fsys.getParentDir(localpath)
			var name = fsys.getFileName(localpath)
			wsock.tcp.simpleHttpServer.documentRoot = root
			var url = wsock.tcp.simpleHttpServer.startUrl(name)
			data.page = url + hash
		}
		// 如果 js 有但 html 没有则让 html 值为空
		if (io.exist(data.main) && !io.exist(localpath)) {
    		data.page = null
		}
	}
	
}

initBaseData()

var external = {
    view = {
        create = function(htmlFile, option) {
            var optionRes = table.assignDeep({
                form = {};
                preloadScript = "";
                userDataDir = null;
                browserArguments = null;
            }, option)
            var winform = win.form(optionRes.form)
            var hwnd = winform.hwnd
            var wb = web.view(winform, optionRes.userDataDir, optionRes.browserArguments);
            winform.wb = wb
            // 挂载到 window.ext 上的对象
            winform.wb.external = {
                wsUrl = wsUrl;
                hwnd = hwnd;
            }
            winform.wb.preloadScript(`
				// 添加 ext
				window.ext = chrome.webview.hostObjects.external

				// 移除 aardio
				setTimeout(() => {
					delete window.aardio
				}, 0);
			`)
            winform.wb.preloadScript(string.load(tempPath + "/res/browser/main.js"))
            winform.wb.preloadScript(optionRes.preloadScript)
            winform.wb.go(htmlFile)
            winform.text = wb.xcall("() => document.title")
            return hwnd
        }
    }
    tray = {
        create = function() {
            var winform = win.form({})
            var hwnd = winform.hwnd
            winform.onTrayMessage = {}
            winform.tray = win.util.tray(winform)
            return hwnd
        }
        on = function(hwnd, key) {
            var code = msgMap[key]
            win.form._forms[hwnd].onTrayMessage[code] = function( ... ) {
                rpcServer.publish(hwnd + "." + key, {
                    ...
                });
            }
        }
        off = function(hwnd, key) {
            var code = msgMap[key]
            win.form._forms[hwnd].onTrayMessage[code] = null
        }
    }
    win = wrapObj(win);
    base = {
        publish = function(key, ... ) {
            rpcServer.publish(key, ... );
        }
    }
    run = function(code, ... ) {
        // 把暴露给代码的变量都统一放在 g 里面
        G.rpcServer = rpcServer
        G.getIcon = getIcon
        var arg = ...
		var res = null
        var err = false
        try {
            res = loadcode(code)(arg)
        }
        catch (e) {
            err = tostring(e);
        }
        return {
            err;
            res;
        }
    }
}

// 定义允许 Node.js 调用的 aardio 函数
rpcServer.external = external

var execFile = function(param) {
    var jsArg = process.joinArguments(_CMDLINE) || ""
    var nodeArg = " --require " + tempPath + "/res/node/main.js" + " " + data.main + " " + jsArg
    var param = nodeArg
    string.setenv("wsUrl", wsUrl);
	import nodeJs;
    var nodeExePath = nodeJs.getInstallPath()
    var node, err = process.popen(nodeExePath, param, {
        workDir = io.fullpath(self.workDir)
    })
    if (node) {
        node.assignToJobObject(process.job.limitKill);
		if (data.debug) {
			io.open()
        	node.codepage = 65001;
        	// 使用异步的方式输出控制台信息
			var timer = onlyMsg.setInterval(function(){
				var s = string.concat(node.peek(0));
				var e = string.concat(node.peekErr(0));
				if(s) console.writeText( string.crlf( s ) );
				if(e) console.writeText( string.crlf( e ) );
				if( !( node.process && node.process.stillActive() ) ) {
					timer = null;
					return 0;
				}
			}, 100)
		}
    };
    return null, err;
}


if (io.exist(data.main)) {
    execFile()
}

if (data.page) {
	// 主入口页面初始化参数
    var hwnd = external.view.create(data.page, {
        form = data.form;
        preloadScript = data.preloadScript;
        userDataDir = data.userDataDir;
        browserArguments = data.browserArguments;
    })
    var winform = win.form._forms[hwnd]
    if(data.pageShow) winform.show()
}

onlyMsg.onClose = function(hwnd, message, wParam, lParam) {
	G.killAll()
    for hwnd in win.form._forms {
        win.form._forms[hwnd].close()
    }
}
win.loopMessage();
