import web.socket.server;
import web.socket.jsonServer;
import web.json;
import fsys;
import fsys.file;
import fsys.res;
import win.util.tray;
import win.ui;
import wsock.tcp.simpleHttpServer;
import web.view;
import inet.http;
import console;
import io;
import mouse
import process;
import process.popen
import inet.httpFile;
import web.form;
import web.multipartFormData;
import nodeJs;

old = win.form._metaProperty.setIcon
win.form._metaProperty.setIcon = function (small, big){
	big = big : small
	small, big = getIcon(small), getIcon(big)
	call(old, owner, big, small)
}


var tempPath = fsys.longpath(fsys.getTempDir() + "/sys-shim/")
fsys.createDir(tempPath)

// 释放资源
fsys.res.saveRes("/res", tempPath)

var cfgPath = ""
var data = {
	main = io.fullpath("./sys.js");
	page = io.fullpath("./page.html");
	socket = {
		ip = "0.0.0.0";
		port = null;
	};
	form = {
		text = "main";
	};
	preloadScript = ``;
	userDataDir = null;
	browserArguments = ``;
}

if(_STUDIO_INVOKED) {
	cfgPath = io.fullpath("./dev.package.json")
} else {
	cfgPath = io.fullpath("./package.json")
}
data = table.assignDeep(
	table.clone(data),
	io.exist(cfgPath) ? web.json.parse(string.load(cfgPath)) : {}
)

// 创建 WebSocket 服务端
var wsrv = web.socket.server();
wsrv.start(data.socket.ip, data.socket.port);
var wsUrl = wsrv.getUrl()
var rpcServer = web.socket.jsonServer(wsrv);

// 这里可以自定义WebSocket 服务端可以使用的 URL 路径
wsrv.onUpgradeToWebsocket = function(hSocket){
	return rpcServer.start(hSocket);
}

var winform = win.form(text="main debug")

if(data.debug) {
	winform.show(true)
}
winform.add(
	edit={cls="richedit";left=23;top=24;right=730;bottom=380;db=1;dl=1;dr=1;dt=1;edge=1;hscroll=1;multiline=1;vscroll=1;z=1}
)

var msgMap = {
	_WM_RBUTTONUP = 0x205;
	_WM_LBUTTONUP = 0x202;
}

function deepGet(obj, str){
	var arr = string.split(str, ".")
	var cur = obj
	var endKey = ``
	for(i=1; #arr; 1){
		var key = arr[i]
		if(#arr == i) {
			endKey = key
		} else {
			cur = cur[key] || cur[tonumber(key)]
		}
	}
	return cur, endKey
}

function getIcon(icon){
	var icon = inet.url.is(icon) ? inet.http().get(icon) : icon
	var hIcon
	if (type(icon) == type.number) {
		if(icon >= 0x7F00/*_IDI_APPLICATION*/) {
			hIcon =  ::LoadIcon(null, topointer(icon));
		} else {
			hIcon =  ::LoadIcon(_HINSTANSE, topointer(icon));
		}
	} elseif (type(icon) == type.string) {
		hIcon = win.image.createIcon(icon, true, 16, 32);
	} else {
		hIcon = icon : _HAPPICON;
	}
	return hIcon
}

// 封装为可以直接 path 路径访问 aardio 的对象属性和方法的形式
function wrapObj(obj){
	return {
		callFn = function(path, ...){
			var cur, endKey = deepGet(obj, path)
			var fn = cur[endKey] || cur[tonumber(endKey)]
			return {call(fn, cur, ...)}
		}
		setVal = function(path, val){
			var cur, endKey = deepGet(obj, path)
			cur[endKey] = val
			return cur[endKey]
		}
		getVal = function(path){
			if(path == null) {return obj; }
			var cur, endKey = deepGet(obj, path)
			var val = cur[endKey] || cur[tonumber(endKey)]
			return val
		}
	};
}


var external = {
	view = {
		create = function(htmlFile, option){
			var optionRes = table.assignDeep({
				form = table.assignDeep(table.clone(data.form), {
					text = "main";
				});
				preloadScript = data.preloadScript;
			}, option)
			var winform = win.form(optionRes.form)
			var hwnd = winform.hwnd
			var wb = web.view(winform, data.userDataDir, data.browserArguments);
			winform.wb = wb
			// 挂载到 window.ext 上的对象
			winform.wb.external = {
				wsUrl = wsUrl;
				hwnd = hwnd;
			}
			winform.wb.preloadScript(`
				// 添加 ext
				window.ext = chrome.webview.hostObjects.external

				// 移除 aardio
				setTimeout(() => {
					delete window.aardio
				}, 0);
			`)
			winform.wb.preloadScript(string.load(tempPath + "/res/browser/main.js"))
			winform.wb.preloadScript(optionRes.preloadScript)
			winform.wb.go(htmlFile)
			winform.text = wb.xcall("() => document.title")
			return hwnd
		}
	}
	tray = {
		create = function(){
			var winform = win.form()
			var hwnd = winform.hwnd
			winform.onTrayMessage = {}
			winform.tray = win.util.tray(winform)
			return hwnd
		}
		on = function(hwnd, key){
			var code = msgMap[key]
			win.form._forms[hwnd].onTrayMessage[code] = function(...){
				rpcServer.publish(hwnd + "." + key, {...});
			}
		}
		off = function(hwnd, key){
			var code = msgMap[key]
			win.form._forms[hwnd].onTrayMessage[code] = null
		}
	}
	win = wrapObj(win);
	base = {
		publish = function(key, ...){
			rpcServer.publish(key, ...);
		}
		exit = function(hwnd){
			if(hwnd) {
				win.close(hwnd)
			} else {
		 		win.quitMessage()
			}
		}
	}
	run = function(code, ...){
		// 把暴露给代码的变量都统一放在 g 里面
		g = {
			rpcServer = rpcServer;
			getIcon = getIcon;
		}
		var arg = ...
		var res = null
		var err = false
		try {
			res = loadcode(code)(arg)
		}
		catch (e) {
			err = tostring(e);
		}
		return {
			err;
			res;
		}
	}
}

// 定义允许 Node.js 调用的 aardio 函数
rpcServer.external = external

var jsFile = io.fullpath(data.main)
var htmlFile = io.fullpath(data.page)
var execFile = function(param){
	var jsArg = process.joinArguments(_CMDLINE) || ""
	var nodeArg = " --require " + tempPath + "/res/node/main.js" + " " + jsFile + " " + jsArg
	var param = nodeArg
	string.setenv("wsUrl", wsUrl);
	var nodeExePath = nodeJs.getInstallPath()
	var node, err = process.popen(nodeExePath, param, {workDir=io.fullpath(self.workDir)})
	if(node){
		node.codepage = 65001;
		node.logResponse(winform.edit);
		node.assignToJobObject(process.job.limitKill);
	};
	return null,err;
}

// 如果什么文件都没有，则创建一个
if(!io.exist(jsFile) && !io.exist(htmlFile)) {
	fsys.copy(tempPath + "/res/page.html", "./page.html")
}


if(io.exist(jsFile)) {
	execFile()
}

if(io.exist(htmlFile)) {
	external.view.create(htmlFile)
}

winform.onClose = function(hwnd,message,wParam,lParam){
	for hwnd in win.form._forms {
		win.form._forms[hwnd].close()
	}
}
win.loopMessage();
