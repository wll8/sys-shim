import web.socket.server;
import web.socket.jsonServer;
import web.json;
import fsys;
import fsys.res;
import win.util.tray;
import win.ui;
import wsock;
import wsock.tcp.simpleHttpServer;
import web.view;
import inet.http;
import console;
import io;
import mouse
import process;
import process.popen
import inet.httpFile;
import web.form;
import web.multipartFormData;
import win.guid;
import fn;
import fsys.remove;

// 放置全局变量
global.G = {
	httpUrl = null;
	clearAppData = false;
	wsUrl = null;
	token = tostring(win.guid.create());
	killAll = function(){
		var str = `cmd start /c rd /s /q "` + io.fullpath(global.G.appDataPath + (global.G.clearAppData ? "" : "/res")) + `" & taskkill /F /T /PID ` + tostring(process.getId())
		process.popen(str)
	};
	getIcon = fn.getIcon;
	msgMap = {
    	_WM_RBUTTONUP = 0x205;
    	_WM_LBUTTONUP = 0x202;
	},
	appDataPath = fsys.longpath(io.appData() + "/sys-shim/" + crypt.sha1(io.fullpath("~"))),
}
		
var old = win.form._metaProperty.setIcon
win.form._metaProperty.setIcon = function(small, big) {
    big = big: small
    small, big = fn.getIcon(small), fn.getIcon(big)
    call(old, owner, big, small)
}

fsys.createDir(global.G.appDataPath)

fsys.res.saveRes("/res", global.G.appDataPath)

var cfgPath = ""
var baseData = {
    main = io.fullpath("./sys.js");
    page = io.fullpath("./page.html");
    loading = io.fullpath(global.G.appDataPath + "/res/loading.html");
    pageExit = true;
    pageShow = false;
    socket = {
        ip = "0.0.0.0";
        port = wsock.getFreePort(),
    };
    http = {
        ip = "0.0.0.0";
        port = fn.webviewPort(global.G.appDataPath).port,
    };
    form = {
		text = "main";
    };
    preloadScript = ``;
    userDataDir = fn.webviewPort(global.G.appDataPath).path,
    browserArguments = ``;
    token = true,
    originRegExp = ``,
    originRegExpMode= `ig`,
}
if (_STUDIO_INVOKED) {
    cfgPath = io.fullpath("./dev.package.json")
}
else {
    cfgPath = io.fullpath("./package.json")
}
var data = table.assignDeep(
    table.clone(baseData), io.exist(cfgPath) ? web.json.parse(string.load(cfgPath)) : {}
)
global.G.config = data

// 创建 WebSocket 服务端
var wsrv = web.socket.server();
wsrv.start(data.socket.ip, data.socket.port);
global.G.wsUrl = wsrv.getUrl()
global.G.rpcServer = web.socket.jsonServer(wsrv);

// 这里可以自定义WebSocket 服务端可以使用的 URL 路径
wsrv.onUpgradeToWebsocket = function(hSocket, request, response, protocol, origin) {

	var you = inet.url.split(origin)
	you.token = request.get.token
	you.origin = tostring(origin)

	var me = inet.url.split(global.G.httpUrl)
	me.token = data.token
	
	if(fn.matchWs(you, me)) {
   		return global.G.rpcServer.start(hSocket);
	} else {
		return response.close()
	}
}

global.G.onlyMsg = win.form({
	parent=...;
	border="none";
	exmode="toolwindow";
	mode="popup";
	topmost=1;
	right=600;
	bottom=600;
	bkBottom=0;
	bkLeft=0;
	bkRight=0;
	bkTop=0;
})
global.G.onlyMsg.show(false)
global.G.onlyMsg.transparent(true);
global.G.onlyMsg.modifyStyleEx(,0x20/*_WS_EX_TRANSPARENT*/ | 0x80000/*_WS_EX_LAYERED*/ );
global.G.wb = web.view(global.G.onlyMsg);
global.G.wb.defaultBackgroundColor = 0;
if(data.loading != false) { 
	global.G.wb.html = string.load(data.loading)
	global.G.onlyMsg.show()
}

function initBaseData() {
	// 手动指定 token 时
	if(fn.toBool(data.token) && type(data.token) = "string") {
		global.G.token = data.token
	}
	// 父窗口转换
	if(type(data.form.parent) = "table") {
		data.form.parent = win.form(data.form.parent).hwnd
	}
	
	// js 暂不支持本地
	data.main = io.fullpath(data.main)
	// html 本地处理逻辑
	if(inet.url.is(data.page) == false) {
		var localpath, hash = ..string.match(data.page, "([^\#\?]+)(.*)");
		// 如果是相对路径，则相对于当前程序运行目录
		localpath = fsys.path.full(localpath, io.fullpath("~"))
		data.page = io.fullpath(localpath) + hash
		// 如果 js 和 html 都没有，则创建 html
		if (!io.exist(data.main) && !io.exist(localpath)) {
    		fsys.copy(global.G.appDataPath + "/res/page.html", "./page.html")
    		data.page = io.fullpath(baseData.page)
    		localpath = data.page
		}
		// 当存在本地 html 时转换它为 http url
		if (io.exist(localpath)) {
			var root = fsys.getParentDir(localpath)
			var name = fsys.getFileName(localpath)
			
			namespace wsock.tcp.simpleHttpServer{
				startIp = data.http.ip;
    			startPort = data.http.port;
			}
			wsock.tcp.simpleHttpServer.documentRoot = root
			var url = wsock.tcp.simpleHttpServer.startUrl(name)
			data.page = url + hash
			global.G.httpUrl = data.page
		}
		// 如果 js 有但 html 没有则让 html 值为空
		if (io.exist(data.main) && !io.exist(localpath)) {
    		data.page = null
		}
	} else {
		global.G.httpUrl = data.page
	}
	
}

initBaseData()

var external = {
    view = {
        create = function(htmlFile, option) {
            var optionRes = table.assignDeep({
                form = {};
                preloadScript = "";
                userDataDir = null;
                browserArguments = null;
            }, option)
            var winform = win.form(optionRes.form)
            var hwnd = winform.hwnd
            var wb = web.view(winform, optionRes.userDataDir, optionRes.browserArguments);
            winform.wb = wb
            // 挂载到 window.ext 上的对象
            winform.wb.external = {
                token = global.G.token;
                wsUrl = global.G.wsUrl;
                hwnd = hwnd;
            }
            winform.wb.preloadScript(`
				// 添加 ext
				window.ext = chrome.webview.hostObjects.external

				// 移除 aardio
				setTimeout(() => {
					delete window.aardio
				}, 0);
			`)
            winform.wb.preloadScript(string.load(global.G.appDataPath + "/res/browser/main.js"))
            winform.wb.preloadScript(optionRes.preloadScript)
            winform.wb.go(htmlFile)
            winform.text = wb.xcall("() => document.title")
            return hwnd
        }
    }
    tray = {
        create = function() {
            var winform = win.form({})
            var hwnd = winform.hwnd
            winform.onTrayMessage = {}
            winform.tray = win.util.tray(winform)
            return hwnd
        }
        on = function(hwnd, key) {
            var code = global.G.msgMap[key]
            win.form._forms[hwnd].onTrayMessage[code] = function( ... ) {
                global.G.rpcServer.publish(hwnd + "." + key, {
                    ...
                });
            }
        }
        off = function(hwnd, key) {
            var code = global.G.msgMap[key]
            win.form._forms[hwnd].onTrayMessage[code] = null
        }
    }
    win = fn.wrapObj(win);
    base = {
        publish = function(key, ... ) {
            global.G.rpcServer.publish(key, ... );
        }
    }
    run = function(code, ... ) {
        var arg = ...
		var res = null
        var err = false
        try {
            res = loadcode(code)(arg)
        }
        catch (e) {
            err = tostring(e);
        }
        return {
            err;
            res;
        }
    }
}

// 定义允许 Node.js 调用的 aardio 函数
global.G.rpcServer.external = external

var execFile = function(param) {
    var jsArg = process.joinArguments(_CMDLINE) || ""
    var nodeArg = ` --require "` + global.G.appDataPath + `/res/node/main.js"` + ` "` + data.main + `" ` + jsArg
    var param = nodeArg
    string.setenv("ext", web.json.stringify({
    	wsUrl = global.G.wsUrl,
    	token = global.G.token,
    }));
	import nodeJs;
    var nodeExePath = nodeJs.getInstallPath()
    var node, err = process.popen(nodeExePath, param, {
        workDir = io.fullpath(self.workDir)
    })
    if (node) {
        node.assignToJobObject(process.job.limitKill);
		if (data.debug) {
			console.open()
        	node.codepage = 65001;
        	// 使用异步的方式输出控制台信息
			var timer = global.G.onlyMsg.setInterval(function(){
				var s = string.concat(node.peek(0));
				var e = string.concat(node.peekErr(0));
				if(s) console.writeText( string.crlf( s ) );
				if(e) console.writeText( string.crlf( e ) );
				if( !( node.process && node.process.stillActive() ) ) {
					timer = null;
					return 0;
				}
			}, 100)
		}
    };
    return null, err;
}


if (io.exist(data.main)) {
    execFile()
}

if (data.page) {
	// 主入口页面初始化参数
    var hwnd = external.view.create(data.page, {
        form = data.form;
        preloadScript = data.preloadScript;
        userDataDir = data.userDataDir;
        browserArguments = data.browserArguments;
    })
    global.G.onlyMsg.show(false)
    win.close(global.G.wb.hwndChrome)
    var winform = win.form._forms[hwnd]
    if(data.pageShow) winform.show()
    if(data.pageExit) {
    	winform.onClose = function() {
      		global.G.killAll()
    	}
    }
} else {
    global.G.onlyMsg.show(false)
}

global.G.onlyMsg.onClose = function(hwnd, message, wParam, lParam) {
	global.G.killAll()
    for hwnd in win.form._forms {
        win.form._forms[hwnd].close()
    }
}

win.loopMessage();
